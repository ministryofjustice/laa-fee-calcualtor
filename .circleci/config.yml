version: 2.1

references:
  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key

  setup_python_env: &setup_python_env
    run:
      name: Set up python dependencies
      command: |
        apk add linux-headers
        apk add python3-dev
        python3 -m venv venv
        pip3 install -r requirements/base.txt

  build_docker_image: &build_docker_image
    run:
      name: Build laa-fee-calculator docker image
      command: |
        export BUILD_DATE=$(date -Is) >> $BASH_ENV
        source $BASH_ENV
        docker build \
          --build-arg DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY} \
          --build-arg VERSION_NUMBER=${CIRCLE_BUILD_NUM} \
          --build-arg COMMIT_ID=${CIRCLE_SHA1} \
          --build-arg BUILD_DATE=${BUILD_DATE} \
          --build-arg BUILD_TAG=app-${CIRCLE_SHA1} \
          --build-arg BUILD_BRANCH=${CIRCLE_BRANCH} \
          -t app .

  push_docker_image: &push_docker_image
    run:
      name: Push laa-fee-calculator docker image
      command: |
        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_ENDPOINT}

        component=app
        docker_registry=${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}

        docker_registry_tag=${docker_registry}:${component}-${CIRCLE_SHA1}
        docker tag app ${docker_registry_tag}
        docker push ${docker_registry_tag}

        printf "\e[33m------------------------------------------------------------------------\e[0m\n"
        printf "\e[33mBranch: $CIRCLE_BRANCH\e[0m\n"
        printf "\e[33mRegistry tag: $docker_registry_tag\e[0m\n"
        printf "\e[33m------------------------------------------------------------------------\e[0m\n"

        if [ "${CIRCLE_BRANCH}" == "master" ]; then
          latest_tag=${docker_registry}:${component}-latest
        else
          latest_tag=${docker_registry}:${component}-${CIRCLE_BRANCH}-latest
        fi

        docker tag app ${latest_tag}
        docker push ${latest_tag}
        printf "\e[33mAlso tagged as ${latest_tag}...\e[0m\n"

# ------------------
# EXECUTORS
# ------------------
executors:
  cloud-platform-executor:
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-get-paid
          APPLICATION_DEPLOY_NAME: laa-fee-calculator
          DJANGO_SECRET_KEY: real-secret-not-needed-here

# ------------------
# COMMANDS
# ------------------
commands:
  deploy-to:
    description: >
      Deploy laa-fee-calculator to the specified environment
    parameters:
      environment:
        description: destination environment
        type: string
    steps:
      - checkout
      - run:
          name: Kubectl authentication
          command: |
            setup-kube-auth
            kubectl config use-context << parameters.environment >>
      - *decrypt_secrets
      - run:
          name: deploying to << parameters.environment >>
          command: |
            docker_image_tag=${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:app-${CIRCLE_SHA1}
            kubectl set image -f kubernetes_deploy/live-1/<< parameters.environment >>/deployment.yaml app=${docker_image_tag} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
                -f kubernetes_deploy/live-1/<< parameters.environment >>/service.yaml \
                -f kubernetes_deploy/live-1/<< parameters.environment >>/ingress.yaml \
                -f kubernetes_deploy/live-1/<< parameters.environment >>/django-secret.yaml

            sentry_dsn_secret=kubernetes_deploy/live-1/<< parameters.environment >>/sentry-dsn.yaml
            [ -f "$sentry_dsn_secret" ] && kubectl apply -f $sentry_dsn_secret

            kubectl annotate deployments/laa-fee-calculator kubernetes.io/change-cause="$(date) - circleCI deploying: $docker_image_tag"

# ------------------
# JOBS
# ------------------
jobs:
  test:
    executor: cloud-platform-executor
    parallelism: 2
    steps:
      - checkout
      - *setup_python_env
      - run:
          name: Split and run tests
          command: |
            TESTDOTPATHS=$(circleci tests glob "fee_calculator/apps/calculator/tests/**/test_*.py" | sed -e 's|\.py||g' -e 's|/|.|g' | circleci tests split)
            python3 manage.py test $TESTDOTPATHS --verbosity=1 --noinput

  build:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *build_docker_image
      - *push_docker_image

  dev_deploy:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: dev

  staging_deploy:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: staging

  production_deploy:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: production

# ------------------
# WORKFLOWS
# ------------------
workflows:
  version: 2
  build-test-and-approval-deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - dev_deploy_approval:
          type: approval
          requires:
            - build
      - dev_deploy:
          requires:
            - dev_deploy_approval
      - staging_deploy_approval:
          type: approval
          requires:
            - dev_deploy
      - staging_deploy:
          requires:
            - staging_deploy_approval
      - production_deploy_approval:
          type: approval
          requires:
            - staging_deploy
          filters:
            branches:
                only:
                  - master
      - production_deploy:
          requires:
            - production_deploy_approval
