version: 2

references:
  container_config: &container_config
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: claim-for-crown-court-defence
          APPLICATION_DEPLOY_NAME: laa-fee-calculator
          DJANGO_SECRET_KEY: laa-fee-calculator

  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key

  setup_python_env: &setup_python_env
    run:
      name: Set up python dependencies
      command: |
        apk add linux-headers
        apk add python3-dev
        python3 -m venv venv
        pip3 install -r requirements/base.txt

  build_docker_image: &build_docker_image
    run:
      name: Build laa-fee-calculator docker image
      command: docker build --build-arg DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY} -t app .

  push_docker_image: &push_docker_image
    run:
      name: Push laa-fee-calculator docker image
      command: |
        login="$(aws ecr get-login --region eu-west-1 --no-include-email)"
        ${login}

        docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

        if [ "${CIRCLE_BRANCH}" == "master" ]; then
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:latest"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:latest"
        fi

jobs:
  test:
    <<: *container_config
    steps:
      - checkout
      - *setup_python_env
      - run: python3 manage.py test

  build:
    <<: *container_config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *build_docker_image
      - *push_docker_image

  staging_deploy:
    <<: *container_config
    steps:
      - checkout
      - run:
          name: Kubectl deployment
          command: |
            setup-kube-auth
            kubectl config use-context staging
      - *decrypt_secrets
      - deploy:
          name: Deploy laa-fee-calculator docker image
          command: |
            kubectl set image -f kubernetes_deploy/staging/deployment.yaml app=${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
                -f kubernetes_deploy/staging/service.yaml \
                -f kubernetes_deploy/staging/ingress.yaml \
                -f kubernetes_deploy/staging/django-secret.yaml

  production_deploy:
    <<: *container_config
    steps:
      - checkout
      - run:
          name: Kubectl deployment
          command: |
            setup-kube-auth
            kubectl config use-context production
      - *decrypt_secrets
      - deploy:
          name: Deploy laa-fee-calculator docker image
          command: |
            kubectl set image -f kubernetes_deploy/production/deployment.yaml app=${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
                -f kubernetes_deploy/production/service.yaml \
                -f kubernetes_deploy/production/ingress.yaml \
                -f kubernetes_deploy/production/django-secret.yaml

workflows:
  version: 2
  build-test-and-approval-deploy:
    jobs:
      # - test
      # - build:
      #     requires:
      #       - test
      - build
      - staging_deploy_approval:
          type: approval
          requires:
            - build
      - staging_deploy:
          requires:
            - staging_deploy_approval
      - production_deploy_approval:
          type: approval
          requires:
            - build
            - staging_deploy
      - production_deploy:
          requires:
            - production_deploy_approval
            - staging_deploy
